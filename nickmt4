//+------------------------------------------------------------------+
//|                                                         nick.mq4 |
//|                                                             Nick |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+

#property copyright "Nick"
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

//--- Inputs

input double RiskLotUnit         = 0.1;
input double RiskPips            = 100;
input double TpPipsUnit          = 50;
input string TradingSymbol       = "AUDCAD";
input int    MaxPostion          = 7;
input double UpperBound          = 1.0;
input double LowerBound          = 0.96;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+

double CurrentDefendingPrice;
double LastestBuyPrice;
double LastestSellPrice;

int OnInit(){
   Print("EA started");
   UpdateLastestPrice();
   if(ShouldITakeBreak()) {
      Print("No trading");
   }
   else {
      TriggerPosition();
   }
   return(INIT_SUCCEEDED);
}



//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+

void OnDeinit(const int reason) {
   Print("EA closed!");
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+

void OnTick(){
   UpdateLastestPrice();
   if(!ShouldITakeBreak()) {
      if(OrdersTotal() == 0 || OrdersTotal() != MaxPostion) {
         TriggerPosition();   
      }
   }
}
//+------------------------------------------------------------------+
void UpdateLastestPrice() {
   MqlTick lastPrice;
   SymbolInfoTick(TradingSymbol , lastPrice);
   LastestBuyPrice = lastPrice.ask;
   LastestSellPrice = lastPrice.bid;
}

void ClearOrdersBy(int orderType){
   for(int i = OrdersTotal() - 1; i >= 0; i--) {
      OrderSelect(i , SELECT_BY_POS , MODE_TRADES);
      if(OrderType() == orderType) {
         OrderDelete(OrderTicket());
      }
   }
}

bool ShouldITakeBreak() {
   if(LastestBuyPrice > LowerBound && LastestSellPrice < UpperBound) {
      //Print("I am taking break");
      return true;
   }
   //Print("I am working now");
   return false;
}

void TriggerPosition() {
   //Print(LastestBuyPrice);
   //Print(LastestSellPrice);
   if(LastestBuyPrice <= LowerBound) {
      //Buy
      ClearOrdersBy(OP_SELLLIMIT);
      BuyLowerBound();
      BuyLimit();
   }
   if(LastestSellPrice >= UpperBound) {
      //Sell
      ClearOrdersBy(OP_BUYLIMIT);
      SellUpperBound();
      SellLimit();
   }
}

//+------------------------------------------------------------------+

void BuyLowerBound() {
      if(OrdersTotal() == 0) {
         OrderSend(TradingSymbol,         //symbol
            OP_BUY,                       //buy or sell
            RiskLotUnit,                  //volume
            LastestBuyPrice,              //pirce
            3,                            //slipage
            0,                            //stop loss
            UpperBound,                   //tp
            "buy base line",              //comment
            16384,                        //magic number
            0,                            //pending order expiration
            Yellow);                      //color
         CurrentDefendingPrice = LastestBuyPrice;
      }

}

void SellUpperBound() {
      if(OrdersTotal() == 0) {
         OrderSend(TradingSymbol,         //symbol
            OP_SELL,                      //buy or sell
            RiskLotUnit,                  //volume
            LastestSellPrice,             //pirce
            3,                            //slipage
            0,                            //stop loss
            LowerBound,                   //tp
            "sell base line",             //comment
            16384,                        //magic number
            0,                            //pending order expiration
            Yellow);                      //color
         CurrentDefendingPrice = LastestSellPrice;
      }
}

void BuyLimit() {
   int currentHoldingRiskLevel[];
   GetCurrentHoldingPosition(currentHoldingRiskLevel);
   for(int riskLevel=1;riskLevel < MaxPostion ;riskLevel++) {
      if(!isContained(currentHoldingRiskLevel , riskLevel)) {
         //Print("Buy Limit"+ riskLevel);
         Buy(riskLevel);
      } else {
         //Print("Skip risklevel" + riskLevel);
      }
   }
}
void SellLimit() {
   int currentHoldingRiskLevel[];
   GetCurrentHoldingPosition(currentHoldingRiskLevel);
   for(int riskLevel=1;riskLevel < MaxPostion ;riskLevel++) {
      if(!isContained(currentHoldingRiskLevel , riskLevel)) {
         //Print("Buy Limit"+ riskLevel);
        Sell(riskLevel);
      } else {
         //Print("Skip risklevel" + riskLevel);
      }
   }
}

void Buy(int riskLevel) {
   int tpFactor = (riskLevel % 2) + 1;
   double roundingUp = MathCeil((riskLevel + 1) / 2);
   double buyLimitPrice = CurrentDefendingPrice - (RiskPips * roundingUp / 10000);
   double tpPrice = buyLimitPrice + (TpPipsUnit * tpFactor / 10000);
  
   OrderSend(TradingSymbol,         //symbol
            OP_BUYLIMIT,            //buy or sell
            RiskLotUnit,            //volume
            buyLimitPrice,          //pirce
            3,                      //slipage
            0,                      //stop loss
            tpPrice,                //tp
            "nick buy limited",     //comment
            riskLevel,              //magic number
            0,                      //pending order expiration
            Green);                 //color
}

void Sell(int riskLevel){
   int tpFactor = (riskLevel % 2) + 1;
   double roundingUp = MathCeil((riskLevel + 1) / 2);
   double sellLimitPrice = CurrentDefendingPrice + (RiskPips * roundingUp / 10000);
   double tpPrice = sellLimitPrice - (TpPipsUnit * tpFactor / 10000);
   OrderSend(TradingSymbol,         //symbol
            OP_SELLLIMIT,           //buy or sell
            RiskLotUnit,            //volume
            sellLimitPrice,         //pirce
            3,                      //slipage
            0,                      //stop loss
            tpPrice,                //tp
            "nick sell limited",    //comment
            riskLevel,              //magic number
            0,                      //pending order expiration
            Green);                 //color
}


bool isContained(int &currentHoldingRiskLevel[] , int riskLevel) {
   for(int i = 0;i<ArraySize(currentHoldingRiskLevel);i++) {
      if(currentHoldingRiskLevel[i] == riskLevel) {
         return true;
      }
   }
   return false;
}


void GetCurrentHoldingPosition( int &currentHoldingRiskLevel[]) {
   ArrayResize(currentHoldingRiskLevel ,OrdersTotal());
   for(int i = 0; i<ArraySize(currentHoldingRiskLevel); i++ ) {
      OrderSelect(i , SELECT_BY_POS , MODE_TRADES);
      currentHoldingRiskLevel[i] = OrderMagicNumber();
   }
}

